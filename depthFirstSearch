#include <stdio.h>
#include <stdlib.h>

#define MAX_VERTICES 100

// Structure for an adjacency list node
struct AdjListNode {
    int dest;
    struct AdjListNode* next;
};

// Structure for a graph
struct Graph {
    int numVertices;
    struct AdjListNode* array[MAX_VERTICES];
};

// Function to create a new graph node
struct AdjListNode* newAdjListNode(int dest) {
    struct AdjListNode* newNode = (struct AdjListNode*)malloc(sizeof(struct AdjListNode));
    newNode->dest = dest;
    newNode->next = NULL;
    return newNode;
}

// Function to create a graph with numVertices vertices
struct Graph* createGraph(int numVertices) {
    struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));
    graph->numVertices = numVertices;

    // Create an array of adjacency lists. Size of array will be numVertices
    for (int i = 0; i < numVertices; ++i) {
        graph->array[i] = NULL;
    }

    return graph;
}

// Function to add an edge to an undirected graph
void addEdge(struct Graph* graph, int src, int dest) {
    // Add an edge from src to dest
    struct AdjListNode* newNode = newAdjListNode(dest);
    newNode->next = graph->array[src];
    graph->array[src] = newNode;

    // Since graph is undirected, add an edge from dest to src also
    newNode = newAdjListNode(src);
    newNode->next = graph->array[dest];
    graph->array[dest] = newNode;
}

// Function for a recursive DFS traversal (simplified)
void DFS(struct Graph* graph, int v, int visited[]) {
    visited[v] = 1;
    printf("%d ", v);

    // Explore unvisited neighbors recursively
    struct AdjListNode* temp = graph->array[v];
    while (temp) {
        if (!visited[temp->dest]) {
            DFS(graph, temp->dest, visited);
        }
        temp = temp->next;
    }
}

// Function to do DFS traversal. It uses recursive DFS()
void DFSUtil(struct Graph* graph, int startVertex) {
    int visited[MAX_VERTICES] = {0}; // Mark all the vertices as not visited

    // Call the DFS function for vertex startVertex
    DFS(graph, startVertex, visited);
}

int main() {
    // Example usage
    int V = 5;
    struct Graph* graph = createGraph(V);

    addEdge(graph, 0, 1);
    addEdge(graph, 0, 4);
    addEdge(graph, 1, 2);
    addEdge(graph, 1, 3);
    addEdge(graph, 2, 3);
    addEdge(graph, 3, 4);

    printf("Following is Depth First Traversal (starting from vertex 0)\n");
    DFSUtil(graph, 0);

    return 0;
}
